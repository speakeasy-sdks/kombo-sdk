"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from kombo import utils
from typing import Any, Dict, List, Optional, Union

class GetAtsJobsSuccessfulResponseDataResultsEmploymentType1(str, Enum):
    r"""The type of employment contract."""
    FULL_TIME = 'FULL_TIME'
    PART_TIME = 'PART_TIME'
    CONTRACT = 'CONTRACT'
    SEASONAL = 'SEASONAL'
    INTERNSHIP = 'INTERNSHIP'


@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsEmploymentType:
    pass

class GetAtsJobsSuccessfulResponseDataResultsHiringTeamHiringTeamRoles(str, Enum):
    RECRUITER = 'RECRUITER'
    HIRING_MANAGER = 'HIRING_MANAGER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsHiringTeam:
    email: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email of the user."""
    first_name: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name') }})
    r"""First name of the user."""
    hiring_team_roles: List[GetAtsJobsSuccessfulResponseDataResultsHiringTeamHiringTeamRoles] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiring_team_roles') }})
    r"""Array of the roles of the user for this specific job. Currently only `RECRUITER` and `HIRING_MANAGER` are mapped into our unified schema."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    last_name: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name') }})
    r"""Last name of the user."""
    remote_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    


class GetAtsJobsSuccessfulResponseDataResultsJobPostingsStatus(str, Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DRAFT = 'DRAFT'

class GetAtsJobsSuccessfulResponseDataResultsJobPostingsVisibility(str, Enum):
    PUBLIC = 'PUBLIC'
    INTERNAL = 'INTERNAL'
    UNLISTED = 'UNLISTED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsJobPostings:
    description_html: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_html') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    remote_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    status: Optional[GetAtsJobsSuccessfulResponseDataResultsJobPostingsStatus] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    visibility: Optional[GetAtsJobsSuccessfulResponseDataResultsJobPostingsVisibility] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsLocation:
    r"""The location of the listed job."""
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Contains the ISO2 country code if possible. If not, it contains the original value."""
    raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw') }})
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    street_1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_1') }})
    street_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_2') }})
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    


class GetAtsJobsSuccessfulResponseDataResultsRemoteWorkStatus1(str, Enum):
    r"""Defines if the job supports remote work and if so, to what extent."""
    REMOTE = 'REMOTE'
    HYBRID = 'HYBRID'
    TEMPORARY = 'TEMPORARY'
    ON_SITE = 'ON_SITE'


@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsRemoteWorkStatus:
    pass

class GetAtsJobsSuccessfulResponseDataResultsSalaryPeriod1(str, Enum):
    r"""The period of the salary amount (not equal to the pay frequency)."""
    YEAR = 'YEAR'
    MONTH = 'MONTH'
    TWO_WEEKS = 'TWO_WEEKS'
    WEEK = 'WEEK'
    DAY = 'DAY'
    HOUR = 'HOUR'


@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsSalaryPeriod:
    pass

class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat9Type(str, Enum):
    r"""When we're not able to map a specific question type yet, we will return this type. Every `UNKNOWN` question will also be parsed and unified by us at some point. This is just a temporary workaround so you still get all questions."""
    UNKNOWN = 'UNKNOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat9:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat9Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""When we're not able to map a specific question type yet, we will return this type. Every `UNKNOWN` question will also be parsed and unified by us at some point. This is just a temporary workaround so you still get all questions."""
    raw_question: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_question'), 'exclude': lambda f: f is None }})
    r"""We pass the original question data along so you can handle it."""
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat8Type(str, Enum):
    r"""This is just a text block."""
    INFORMATION = 'INFORMATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat8:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat8Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""This is just a text block."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7Options:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Kombo ID of this question option. Use this ID to specify the answer to this question."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Content of the question option."""
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    r"""ID in the connected ATS. This might be null as some systems only use the name to identify the option."""
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7Type(str, Enum):
    MULTI_SELECT = 'MULTI_SELECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7:
    options: List[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7Options] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat6Type(str, Enum):
    DATE = 'DATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat6:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat6Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat5Type(str, Enum):
    BOOLEAN = 'BOOLEAN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat5:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat5Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4DisplayType(str, Enum):
    DROPDOWN = 'DROPDOWN'
    RADIO = 'RADIO'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4Options:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Kombo ID of this question option. Use this ID to specify the answer to this question."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Content of the question option."""
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    r"""ID in the connected ATS. This might be null as some systems only use the name to identify the option."""
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4Type(str, Enum):
    SINGLE_SELECT = 'SINGLE_SELECT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4:
    options: List[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4Options] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    display_type: Optional[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4DisplayType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_type') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat3Type(str, Enum):
    FILE = 'FILE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat3:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat3Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2DisplayType(str, Enum):
    SLIDER = 'SLIDER'
    FIELD = 'FIELD'

class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2Type(str, Enum):
    NUMBER = 'NUMBER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    display_type: Optional[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2DisplayType] = dataclasses.field(default=GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2DisplayType.FIELD, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_type') }})
    max: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min') }})
    


class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1DisplayType(str, Enum):
    r"""If unavailable, we recommend displaying a single-line input."""
    SINGLE_LINE = 'SINGLE_LINE'
    MULTI_LINE = 'MULTI_LINE'

class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1Type(str, Enum):
    TEXT = 'TEXT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1:
    type: GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    display_type: Optional[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1DisplayType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_type') }})
    r"""If unavailable, we recommend displaying a single-line input."""
    max_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_length') }})
    



@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsScreeningQuestions:
    description: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    format: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat1, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat2, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat3, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat4, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat5, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat6, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat7, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat8, GetAtsJobsSuccessfulResponseDataResultsScreeningQuestionsFormat9]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    remote_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    required: Optional[bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required') }})
    title: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsStages:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    name: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    remote_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index') }})
    


class GetAtsJobsSuccessfulResponseDataResultsStatus1(str, Enum):
    r"""One of 4 standardized values (`OPEN`, `CLOSED`, `DRAFT`, or `ARCHIVED`) **or** — in rare cases where can't find a clear mapping — the original string passed through."""
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    DRAFT = 'DRAFT'
    ARCHIVED = 'ARCHIVED'


@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsStatus:
    pass

class GetAtsJobsSuccessfulResponseDataResultsVisibility1(str, Enum):
    r"""Describes the visibility of the job:

    - `PUBLIC`: visible to everyone, published on a job board
    - `INTERNAL`: only visible to employees of the company itself
    - `UNLISTED`: anyone can apply but only if they have the link to it
    - `CONFIDENTIAL`: nobody can apply and it's only visible in the ATS to people who were invited to it

    Useful if you are providing a job board and want to post public open jobs of your customers/partners.
    """
    PUBLIC = 'PUBLIC'
    INTERNAL = 'INTERNAL'
    UNLISTED = 'UNLISTED'
    CONFIDENTIAL = 'CONFIDENTIAL'


@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResultsVisibility:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseDataResults:
    r"""The hiring team allows you to sync users into your system who can access the job and its applications."""
    category: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The category of the job (often the job industry)."""
    changed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""The timestamp when this object was last changed. This value is tracked by Kombo based on changes in the data.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    closed_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""YYYY-MM-DDTHH:mm:ss.sssZ
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    confidential: Optional[bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidential') }})
    r"""**(⚠️ Deprecated)** It makes more sense to store the visibility of a job in an enum. Therefore, we introduced the `visibility` enum on jobs."""
    contact_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact_id') }})
    r"""**(⚠️ Deprecated)** The user ID of the contact person for this job. We strongly recommend using the new `hiring_team` property instead as it provides more complete and accurate information about the ATS users connected to a job."""
    department: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('department') }})
    description: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the job. This field is usually returned as HTML."""
    employment_type: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsEmploymentType1, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employment_type') }})
    r"""The type of employment contract."""
    experience_level: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('experience_level') }})
    hiring_team: List[GetAtsJobsSuccessfulResponseDataResultsHiringTeam] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiring_team') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The globally unique ID of this object generated by Kombo. We recommend using this as a stable primary key for syncing."""
    job_code: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_code') }})
    r"""The human readable job code. Some systems expose this as the Requisition Code/ID."""
    job_postings: List[GetAtsJobsSuccessfulResponseDataResultsJobPostings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_postings') }})
    location: Optional[GetAtsJobsSuccessfulResponseDataResultsLocation] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""The location of the listed job."""
    name: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Title of the job."""
    opened_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opened_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""YYYY-MM-DDTHH:mm:ss.sssZ
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    post_url: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_url') }})
    r"""The public job posting URL of the ATS itself. This can be used by external job boards to redirect applicants."""
    remote_created_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""The date and time the object was created in the remote system.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    remote_data: Optional[Dict[str, Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_data') }})
    remote_deleted_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_deleted_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""The date and time the object was deleted in the remote system. Objects are automatically marked as deleted when Kombo can't retrieve them from the remote system anymore. Kombo will also anonymize entries 14 days after they disappear.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    remote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_id') }})
    r"""The raw ID of the object in the remote system. We don't recommend using this as a primary key on your side as it might sometimes be compromised of multiple identifiers if a system doesn't provide a clear primary key."""
    remote_updated_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""A timestamp retrieved from the remote system, describing when the resource was last updated.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
    """
    remote_work_status: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsRemoteWorkStatus1, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_work_status') }})
    r"""Defines if the job supports remote work and if so, to what extent."""
    salary_amount: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary_amount') }})
    r"""The salary amount in the given currency."""
    salary_amount_from: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary_amount_from') }})
    r"""The lower bound of the salary range."""
    salary_amount_to: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary_amount_to') }})
    r"""The upper bound of the salary range."""
    salary_currency: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary_currency') }})
    r"""Salary currency usually returned in [ISO 4217 currency codes](https://www.iso.org/iso-4217-currency-codes.html)."""
    salary_period: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsSalaryPeriod1, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salary_period') }})
    r"""The period of the salary amount (not equal to the pay frequency)."""
    screening_questions: List[GetAtsJobsSuccessfulResponseDataResultsScreeningQuestions] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screening_questions') }})
    stages: List[GetAtsJobsSuccessfulResponseDataResultsStages] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stages') }})
    status: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsStatus1, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""One of 4 standardized values (`OPEN`, `CLOSED`, `DRAFT`, or `ARCHIVED`) **or** — in rare cases where can't find a clear mapping — the original string passed through."""
    visibility: Optional[Union[GetAtsJobsSuccessfulResponseDataResultsVisibility1, str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility') }})
    r"""Describes the visibility of the job:

    - `PUBLIC`: visible to everyone, published on a job board
    - `INTERNAL`: only visible to employees of the company itself
    - `UNLISTED`: anyone can apply but only if they have the link to it
    - `CONFIDENTIAL`: nobody can apply and it's only visible in the ATS to people who were invited to it

    Useful if you are providing a job board and want to post public open jobs of your customers/partners.
    """
    weekly_hours: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weekly_hours') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponseData:
    next: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next') }})
    r"""Cursor string that can be passed to the `cursor` query parameter to get the next page. If this is `null`, then there are no more pages."""
    results: List[GetAtsJobsSuccessfulResponseDataResults] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results') }})
    


class GetAtsJobsSuccessfulResponseStatus(str, Enum):
    SUCCESS = 'success'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtsJobsSuccessfulResponse:
    data: GetAtsJobsSuccessfulResponseData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    status: GetAtsJobsSuccessfulResponseStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    

