"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import getatsjobsparameterincludedeleted as shared_getatsjobsparameterincludedeleted
from ...models.shared import getatsjobsparameterstatus as shared_getatsjobsparameterstatus
from ...models.shared import getatsjobssuccessfulresponse as shared_getatsjobssuccessfulresponse
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetAtsJobsRequest:
    x_integration_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Integration-Id', 'style': 'simple', 'explode': False }})
    r"""ID of the integration you want to interact with."""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""An optional cursor string used for pagination. This can be retrieved from the `next` property of the previous page response."""
    ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of IDs such as `222k7eCGyUdgt2JWZDNnkDs3,B5DVmypWENfU6eMe6gYDyJG3`."""
    include_deleted: Optional[shared_getatsjobsparameterincludedeleted.GetAtsJobsParameterIncludeDeleted] = dataclasses.field(default=shared_getatsjobsparameterincludedeleted.GetAtsJobsParameterIncludeDeleted.FALSE, metadata={'query_param': { 'field_name': 'include_deleted', 'style': 'form', 'explode': True }})
    r"""By default, deleted entries are not returned. Use the `include_deleted` query param to include deleted entries too."""
    job_codes: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'job_codes', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of job codes."""
    name_contains: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name_contains', 'style': 'form', 'explode': True }})
    r"""Filter by the `name` field. Can be used to find a job by keywords present in the job name."""
    page_size: Optional[int] = dataclasses.field(default=100, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of results to return per page."""
    post_url: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'post_url', 'style': 'form', 'explode': True }})
    r"""Filter by the `post_url` field. Can be used to find a job based on its public posting URL."""
    remote_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'remote_ids', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of remote IDs."""
    status: Optional[shared_getatsjobsparameterstatus.GetAtsJobsParameterStatus] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""**(⚠️ Deprecated)** Filter by the `status` field. Can be used to find a job based on its status."""
    statuses: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'statuses', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of `OPEN`, `CLOSED`, `DRAFT`, `ARCHIVED`"""
    updated_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_after', 'style': 'form', 'explode': True }})
    r"""Filter the entries based on the modification date. If you want to track entry deletion, also set the `include_deleted=true` query parameter, because otherwise, deleted entries will be hidden."""
    



@dataclasses.dataclass
class GetAtsJobsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    get_ats_jobs_successful_response: Optional[shared_getatsjobssuccessfulresponse.GetAtsJobsSuccessfulResponse] = dataclasses.field(default=None)
    r"""GET /ats/jobs Successful response"""
    

