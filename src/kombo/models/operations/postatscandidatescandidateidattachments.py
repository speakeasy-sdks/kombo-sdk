"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import postatscandidatescandidateidattachmentssuccessfulresponse as shared_postatscandidatescandidateidattachmentssuccessfulresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from kombo import utils
from typing import Optional

class PostAtsCandidatesCandidateIDAttachmentsType(str, Enum):
    CV = 'CV'
    COVER_LETTER = 'COVER_LETTER'
    OTHER = 'OTHER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Attachment:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the file you want to upload."""
    type: PostAtsCandidatesCandidateIDAttachmentsType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_type'), 'exclude': lambda f: f is None }})
    r"""Content/MIME type of the file (e.g., `application/pdf`). This is required if you provide `data` and optional if you provide `data_url`."""
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Base64-encoded contents of the file you want to upload. You must provide either this or `data_url`."""
    data_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_url'), 'exclude': lambda f: f is None }})
    r"""Publicly accessible URL to the file you want to upload. You must provide either this or `data`."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsPostHeaders:
    r"""Headers we will pass with `POST` requests to Greenhouse."""
    UNSET='__SPEAKEASY_UNSET__'
    on_behalf_of: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('On-Behalf-Of'), 'exclude': lambda f: f is PostAtsCandidatesCandidateIDAttachmentsPostHeaders.UNSET }})
    r"""ID of the the user that will show up as having performed the action in Greenhouse. We already pass a value by default, but you can use this to override it."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsGreenhouse:
    r"""Fields specific to Greenhouse."""
    post_headers: Optional[PostAtsCandidatesCandidateIDAttachmentsPostHeaders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_headers'), 'exclude': lambda f: f is None }})
    r"""Headers we will pass with `POST` requests to Greenhouse."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsRemoteFields:
    r"""Additional fields that we will pass through to specific ATS systems."""
    greenhouse: Optional[PostAtsCandidatesCandidateIDAttachmentsGreenhouse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('greenhouse'), 'exclude': lambda f: f is None }})
    r"""Fields specific to Greenhouse."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsRequestBody:
    r"""POST /ats/candidates/:candidate_id/attachments request body"""
    attachment: Attachment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment') }})
    remote_fields: Optional[PostAtsCandidatesCandidateIDAttachmentsRemoteFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_fields'), 'exclude': lambda f: f is None }})
    r"""Additional fields that we will pass through to specific ATS systems."""
    



@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsRequest:
    x_integration_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Integration-Id', 'style': 'simple', 'explode': False }})
    r"""ID of the integration you want to interact with."""
    candidate_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'candidate_id', 'style': 'simple', 'explode': False }})
    r"""POST /ats/candidates/:candidate_id/attachments parameter"""
    request_body: Optional[PostAtsCandidatesCandidateIDAttachmentsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""POST /ats/candidates/:candidate_id/attachments request body"""
    



@dataclasses.dataclass
class PostAtsCandidatesCandidateIDAttachmentsResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    post_ats_candidates_candidate_id_attachments_successful_response: Optional[shared_postatscandidatescandidateidattachmentssuccessfulresponse.PostAtsCandidatesCandidateIDAttachmentsSuccessfulResponse] = dataclasses.field(default=None)
    r"""POST /ats/candidates/:candidate_id/attachments Successful response"""
    

