"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import gethrisabsencesparameterincludedeleted as shared_gethrisabsencesparameterincludedeleted
from ...models.shared import gethrisabsencessuccessfulresponse as shared_gethrisabsencessuccessfulresponse
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetHrisAbsencesRequest:
    x_integration_id: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Integration-Id', 'style': 'simple', 'explode': False }})
    r"""ID of the integration you want to interact with."""
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""An optional cursor string used for pagination. This can be retrieved from the `next` property of the previous page response."""
    date_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_from', 'style': 'form', 'explode': True }})
    r"""Filter for all the absences that either start _or_ haven't ended yet on/after this day. If you imagine a calendar displaying absences, this defines the left-most visible day. This is a plain date (i.e., `yyyy-MM-dd`), all time information is discarded."""
    date_until: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_until', 'style': 'form', 'explode': True }})
    r"""Filter for absences that start on or before this day (but might continue after). If you imagine a calendar displaying absences, this defines the right-most visible day. This is a plain date (i.e., `yyyy-MM-dd`), all time information is discarded."""
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'employee_id', 'style': 'form', 'explode': True }})
    r"""Filter by a specific employee using their ID."""
    ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of IDs such as `222k7eCGyUdgt2JWZDNnkDs3,B5DVmypWENfU6eMe6gYDyJG3`."""
    include_deleted: Optional[shared_gethrisabsencesparameterincludedeleted.GetHrisAbsencesParameterIncludeDeleted] = dataclasses.field(default=shared_gethrisabsencesparameterincludedeleted.GetHrisAbsencesParameterIncludeDeleted.FALSE, metadata={'query_param': { 'field_name': 'include_deleted', 'style': 'form', 'explode': True }})
    r"""By default, deleted entries are not returned. Use the `include_deleted` query param to include deleted entries too."""
    page_size: Optional[int] = dataclasses.field(default=100, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of results to return per page."""
    remote_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'remote_ids', 'style': 'form', 'explode': True }})
    r"""Filter by a comma-separated list of remote IDs."""
    time_from: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'time_from', 'style': 'form', 'explode': True }})
    r"""**(⚠️ Deprecated)** Filter for absences that either start after or start before and end after a certain time. Please use `date_from` instead."""
    time_until: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'time_until', 'style': 'form', 'explode': True }})
    r"""**(⚠️ Deprecated)** Filter for absences that start before a certain time. Please use `date_until` instead."""
    updated_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_after', 'style': 'form', 'explode': True }})
    r"""Filter the entries based on the modification date. If you want to track entry deletion, also set the `include_deleted=true` query parameter, because otherwise, deleted entries will be hidden."""
    



@dataclasses.dataclass
class GetHrisAbsencesResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    get_hris_absences_successful_response: Optional[shared_gethrisabsencessuccessfulresponse.GetHrisAbsencesSuccessfulResponse] = dataclasses.field(default=None)
    r"""GET /hris/absences Successful response"""
    

