"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import postpassthroughtoolapierrorresponse as shared_postpassthroughtoolapierrorresponse
from ..shared import postpassthroughtoolapisuccessfulresponse as shared_postpassthroughtoolapisuccessfulresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from kombo import utils
from typing import Any, Dict, Optional

class PostPassthroughToolAPIRequestBodyMethod(str, Enum):
    r"""The HTTP method (e.g., `GET`) of the request."""
    GET = 'GET'
    POST = 'POST'
    DELETE = 'DELETE'
    PUT = 'PUT'
    PATCH = 'PATCH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPIRequestBody:
    r"""POST /passthrough/:tool/:api request body"""
    method: PostPassthroughToolAPIRequestBodyMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""The HTTP method (e.g., `GET`) of the request."""
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The path of the endpoint you want to call. We automatically prepend the base URL of the API (all base URLs are documented in the endpoint description)."""
    api_options: Optional[Dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_options'), 'exclude': lambda f: f is None }})
    r"""Custom options interpreted by the passthrough API adapter you've selected. These options are not documented right now as they're only for very advanced use cases."""
    data: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""The data to submit as part of the request body. This can either be an array or object (in which case we will forward it as JSON) or a string (in which case we will forward it raw)."""
    headers: Optional[Dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""The headers to send with the request. Note that we automatically supply any authentication-related headers."""
    params: Optional[Dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('params'), 'exclude': lambda f: f is None }})
    r"""The query parameters to send in addition to the ones in the `path`."""
    



@dataclasses.dataclass
class PostPassthroughToolAPIRequest:
    api: str = dataclasses.field(metadata={'path_param': { 'field_name': 'api', 'style': 'simple', 'explode': False }})
    r"""The ID of the passthrough API you want to call (some tools provide multiple). Check the endpoint description for a list of all available APIs."""
    tool: str = dataclasses.field(metadata={'path_param': { 'field_name': 'tool', 'style': 'simple', 'explode': False }})
    r"""The ID of the tool whose passthrough API you want to call (e.g., `personio`)."""
    request_body: Optional[PostPassthroughToolAPIRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""POST /passthrough/:tool/:api request body"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI503ApplicationJSONError:
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    


class PostPassthroughToolAPI503ApplicationJSONStatus(str, Enum):
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI503ApplicationJSON:
    r"""Returned when no sync has finished successfully yet"""
    error: PostPassthroughToolAPI503ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    status: PostPassthroughToolAPI503ApplicationJSONStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI404ApplicationJSONError:
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    


class PostPassthroughToolAPI404ApplicationJSONStatus(str, Enum):
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI404ApplicationJSON:
    r"""Returned when a requested resource is not found."""
    error: PostPassthroughToolAPI404ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    status: PostPassthroughToolAPI404ApplicationJSONStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI403ApplicationJSONError:
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    


class PostPassthroughToolAPI403ApplicationJSONStatus(str, Enum):
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI403ApplicationJSON:
    r"""Returned when the passed integration is inactive."""
    error: PostPassthroughToolAPI403ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    status: PostPassthroughToolAPI403ApplicationJSONStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI401ApplicationJSONError:
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    


class PostPassthroughToolAPI401ApplicationJSONStatus(str, Enum):
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPassthroughToolAPI401ApplicationJSON:
    r"""Returned when the authentication header was invalid or missing."""
    error: PostPassthroughToolAPI401ApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    status: PostPassthroughToolAPI401ApplicationJSONStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    



@dataclasses.dataclass
class PostPassthroughToolAPIResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    post_passthrough_tool_api_401_application_json_object: Optional[PostPassthroughToolAPI401ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when the authentication header was invalid or missing."""
    post_passthrough_tool_api_403_application_json_object: Optional[PostPassthroughToolAPI403ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when the passed integration is inactive."""
    post_passthrough_tool_api_404_application_json_object: Optional[PostPassthroughToolAPI404ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when a requested resource is not found."""
    post_passthrough_tool_api_503_application_json_object: Optional[PostPassthroughToolAPI503ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when no sync has finished successfully yet"""
    post_passthrough_tool_api_error_response: Optional[shared_postpassthroughtoolapierrorresponse.PostPassthroughToolAPIErrorResponse] = dataclasses.field(default=None)
    r"""POST /passthrough/:tool/:api Error response"""
    post_passthrough_tool_api_successful_response: Optional[shared_postpassthroughtoolapisuccessfulresponse.PostPassthroughToolAPISuccessfulResponse] = dataclasses.field(default=None)
    r"""POST /passthrough/:tool/:api Successful response"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

