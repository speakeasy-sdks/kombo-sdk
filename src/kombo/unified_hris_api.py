"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from kombo import utils
from kombo._hooks import HookContext
from kombo.models import errors, operations, shared
from typing import Optional

class UnifiedHRISAPI:
    r"""Unified endpoints to access all the HR concepts you might need."""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def delete_hris_absences_absence_id(self, x_integration_id: str, absence_id: str, delete_hris_absences_absence_id_request_body: Optional[shared.DeleteHrisAbsencesAbsenceIDRequestBody] = None) -> operations.DeleteHrisAbsencesAbsenceIDResponse:
        r"""Delete absence
        Delete this absence.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Manage absences** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"absence_id\": \"wXJMxwDvPAjrJ4CyqdV9\"
        }
        ```
        """
        hook_ctx = HookContext(operation_id='DeleteHrisAbsencesAbsenceId', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.DeleteHrisAbsencesAbsenceIDRequest(
            x_integration_id=x_integration_id,
            absence_id=absence_id,
            delete_hris_absences_absence_id_request_body=delete_hris_absences_absence_id_request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteHrisAbsencesAbsenceIDRequest, base_url, '/hris/absences/{absence_id}', request)
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, operations.DeleteHrisAbsencesAbsenceIDRequest, "delete_hris_absences_absence_id_request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.DeleteHrisAbsencesAbsenceIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteHrisAbsencesAbsenceIDSuccessfulResponse])
                res.delete_hris_absences_absence_id_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.DeleteHrisAbsencesAbsenceIDErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.DeleteHrisAbsencesAbsenceIDResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.DeleteHRISAbsencesAbsenceIDUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.DeleteHRISAbsencesAbsenceIDUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.DeleteHRISAbsencesAbsenceIDUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_absence_types(self, request: operations.GetHrisAbsenceTypesRequest) -> operations.GetHrisAbsenceTypesResponse:
        r"""Get absence types
        Retrieve all absence types.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datev/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV LODAS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datevlug/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV Lohn & Gehalt</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisAbsenceTypes', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/absence-types'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisAbsenceTypesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisAbsenceTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisAbsenceTypesSuccessfulResponse])
                res.get_hris_absence_types_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisAbsenceTypesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisAbsenceTypesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsenceTypesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsenceTypesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsenceTypesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_absences(self, request: operations.GetHrisAbsencesRequest) -> operations.GetHrisAbsencesResponse:
        r"""Get absences
        Retrieve all absences.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisAbsences', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/absences'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisAbsencesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisAbsencesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisAbsencesSuccessfulResponse])
                res.get_hris_absences_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisAbsencesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisAbsencesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsencesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsencesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISAbsencesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_employees(self, request: operations.GetHrisEmployeesRequest) -> operations.GetHrisEmployeesResponse:
        r"""Get employees
        Retrieve all employees.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heavenhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HeavenHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/azuread/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Azure AD</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/googleworkspace/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Google Workspace</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/remotecom/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Remote</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/okta/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Okta</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclehcm/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle HCM</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/gusto/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Gusto</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/peoplehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PeopleHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lucca/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lucca</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/silae/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Silae</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/iriscascade/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />IRIS Cascade</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>Not interested in most fields? You can use our [our Scopes feature](/scopes) to customize what data points are synced.</Note>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisEmployees', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/employees'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisEmployeesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisEmployeesSuccessfulResponse])
                res.get_hris_employees_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisEmployeesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisEmployeesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmployeesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmployeesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmployeesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_employments(self, request: operations.GetHrisEmploymentsRequest) -> operations.GetHrisEmploymentsResponse:
        r"""Get employments
        Retrieve all employments.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heavenhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HeavenHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/remotecom/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Remote</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclehcm/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle HCM</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/peoplehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PeopleHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lucca/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lucca</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/silae/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Silae</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/iriscascade/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />IRIS Cascade</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisEmployments', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/employments'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisEmploymentsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisEmploymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisEmploymentsSuccessfulResponse])
                res.get_hris_employments_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisEmploymentsErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisEmploymentsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmploymentsUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmploymentsUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISEmploymentsUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_groups(self, request: operations.GetHrisGroupsRequest) -> operations.GetHrisGroupsResponse:
        r"""Get groups
        Retrieve all \"groups\" (teams, departments, and cost centers).

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heavenhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HeavenHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/azuread/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Azure AD</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/googleworkspace/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Google Workspace</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/okta/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Okta</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclehcm/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle HCM</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/gusto/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Gusto</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/peoplehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PeopleHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lucca/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lucca</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/silae/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Silae</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/iriscascade/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />IRIS Cascade</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisGroups', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/groups'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisGroupsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisGroupsSuccessfulResponse])
                res.get_hris_groups_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisGroupsErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisGroupsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISGroupsUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISGroupsUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISGroupsUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_legal_entities(self, request: operations.GetHrisLegalEntitiesRequest) -> operations.GetHrisLegalEntitiesResponse:
        r"""Get legal entities
        Retrieve all legal entites.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/gusto/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Gusto</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lucca/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lucca</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisLegalEntities', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/legal-entities'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisLegalEntitiesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisLegalEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisLegalEntitiesSuccessfulResponse])
                res.get_hris_legal_entities_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisLegalEntitiesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisLegalEntitiesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLegalEntitiesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLegalEntitiesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLegalEntitiesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_locations(self, request: operations.GetHrisLocationsRequest) -> operations.GetHrisLocationsResponse:
        r"""Get locations
        Retrieve all locations.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heavenhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HeavenHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/remotecom/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Remote</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclehcm/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle HCM</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/gusto/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Gusto</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/peoplehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PeopleHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisLocations', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/locations'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisLocationsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisLocationsSuccessfulResponse])
                res.get_hris_locations_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisLocationsErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisLocationsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLocationsUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLocationsUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISLocationsUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_teams(self, request: operations.GetHrisTeamsRequest) -> operations.GetHrisTeamsResponse:
        r"""Get teams (deprecated)
        Get the teams.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/payfit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PayFit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/kenjo/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Kenjo</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heavenhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HeavenHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/azuread/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Azure AD</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/googleworkspace/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Google Workspace</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/okta/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Okta</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclehcm/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle HCM</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/officient/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Officient</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/gusto/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Gusto</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rippling/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Rippling</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/peoplehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />PeopleHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lucca/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lucca</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/haileyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Hailey HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/silae/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Silae</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/iriscascade/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />IRIS Cascade</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        **(⚠️ Deprecated)** Please use [the `/groups` endpoint](/hris/v1/get-groups) instead. It returns the same data but the naming makes more sense as the model not only includes teams but also departments and cost centers.

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisTeams', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/teams'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisTeamsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisTeamsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisTeamsSuccessfulResponse])
                res.get_hris_teams_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisTeamsErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisTeamsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTeamsUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTeamsUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTeamsUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hris_time_off_balances(self, request: operations.GetHrisTimeOffBalancesRequest) -> operations.GetHrisTimeOffBalancesResponse:
        r"""Get time off balances
        Retrieve all time off balances.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/eurecia/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Eurécia</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/charliehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Charlie</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetHrisTimeOffBalances', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/time-off-balances'
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetHrisTimeOffBalancesRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.GetHrisTimeOffBalancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetHrisTimeOffBalancesSuccessfulResponse])
                res.get_hris_time_off_balances_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisTimeOffBalancesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHrisTimeOffBalancesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTimeOffBalancesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTimeOffBalancesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.GetHRISTimeOffBalancesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def patch_hris_employees_employee_id(self, x_integration_id: str, employee_id: str, patch_hris_employees_employee_id_request_body: Optional[shared.PatchHrisEmployeesEmployeeIDRequestBody] = None) -> operations.PatchHrisEmployeesEmployeeIDResponse:
        r"""Update employee
        Update an employee.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datev/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV LODAS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datevlug/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV Lohn & Gehalt</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Create and manage employees** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"employee_id\": \"BkgfzSr5muN9cUTMD4wDQFn4\",
          \"first_name\": \"John\",
          \"last_name\": \"Doe\",
          \"work_email\": \"john.doe@acme.com\",
          \"ssn\": \"555-32-6395\",
          \"tax_id\": \"12 345 678 901\",
          \"gender\": \"MALE\",
          \"marital_status\": \"MARRIED\",
          \"date_of_birth\": \"1986-01-01\",
          \"start_date\": \"2020-04-07\",
          \"termination_date\": \"2022-05-20\",
          \"job_title\": \"Integrations Team Lead\",
          \"nationality\": \"DE\",
          \"home_address\": {
            \"city\": \"Berlin\",
            \"country\": \"DE\",
            \"state\": \"Berlin\",
            \"street_1\": \"Sonnenallee 63\",
            \"zip_code\": \"12045\"
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PatchHrisEmployeesEmployeeId', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PatchHrisEmployeesEmployeeIDRequest(
            x_integration_id=x_integration_id,
            employee_id=employee_id,
            patch_hris_employees_employee_id_request_body=patch_hris_employees_employee_id_request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PatchHrisEmployeesEmployeeIDRequest, base_url, '/hris/employees/{employee_id}', request)
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, operations.PatchHrisEmployeesEmployeeIDRequest, "patch_hris_employees_employee_id_request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PATCH', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PatchHrisEmployeesEmployeeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchHrisEmployeesEmployeeIDSuccessfulResponse])
                res.patch_hris_employees_employee_id_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PatchHrisEmployeesEmployeeIDErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PatchHrisEmployeesEmployeeIDResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PatchHRISEmployeesEmployeeIDUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PatchHRISEmployeesEmployeeIDUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PatchHRISEmployeesEmployeeIDUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_hris_absences(self, x_integration_id: str, request_body: Optional[operations.PostHrisAbsencesRequestBody] = None) -> operations.PostHrisAbsencesResponse:
        r"""Create absence
        Create a new absence.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/deel/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Deel</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sesamehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sesame HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datev/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV LODAS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/datevlug/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />DATEV Lohn & Gehalt</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Check [this page](/hris/features/creating-absences) for a detailed guide.

        <Note>
          This endpoint requires the permission **Manage absences** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"employee_id\": \"wXJMxwDvPAjrJ4CyqdV9\",
          \"absence_type_id\": \"3YKtQ7qedsrcCady1jSyAkY1\",
          \"start_date\": \"2019-09-17\",
          \"end_date\": \"2019-09-21\",
          \"start_half_day\": false,
          \"end_half_day\": false,
          \"employee_note\": \"Visiting the aliens\",
          \"start_time\": \"08:30:00\",
          \"end_time\": \"16:00:00\"
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostHrisAbsences', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostHrisAbsencesRequest(
            x_integration_id=x_integration_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/absences'
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostHrisAbsencesRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostHrisAbsencesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostHrisAbsencesSuccessfulResponse])
                res.post_hris_absences_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHrisAbsencesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHrisAbsencesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISAbsencesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISAbsencesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISAbsencesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_hris_employees(self, x_integration_id: str, request_body: Optional[operations.PostHrisEmployeesRequestBody] = None) -> operations.PostHrisEmployeesResponse:
        r"""Create employee
        Create a new employee.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/factorial/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Factorial</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hibob/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HiBob</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/remotecom/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Remote</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/humaans/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Humaans</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breathehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breathe HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/nmbrs/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Nmbrs</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Create and manage employees** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"first_name\": \"John\",
          \"last_name\": \"Doe\",
          \"work_email\": \"john.doe@acme.com\",
          \"gender\": \"MALE\",
          \"job_title\": \"Integrations Team Lead\",
          \"home_address\": {
            \"city\": \"Berlin\",
            \"country\": \"DE\",
            \"state\": \"Berlin\",
            \"street_1\": \"Sonnenallee 63\",
            \"zip_code\": \"12045\"
          },
          \"date_of_birth\": \"1986-01-01\",
          \"start_date\": \"2020-04-07\"
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostHrisEmployees', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostHrisEmployeesRequest(
            x_integration_id=x_integration_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/hris/employees'
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostHrisEmployeesRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostHrisEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostHrisEmployeesSuccessfulResponse])
                res.post_hris_employees_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHrisEmployeesErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHrisEmployeesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISEmployeesUnifiedHRISAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISEmployeesUnifiedHRISAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHRISEmployeesUnifiedHRISAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_hris_employees_employee_id_attachments(self, x_integration_id: str, employee_id: str, post_hris_employees_employee_id_attachments_request_body: Optional[shared.PostHrisEmployeesEmployeeIDAttachmentsRequestBody] = None) -> operations.PostHrisEmployeesEmployeeIDAttachmentsResponse:
        r"""Add attachment to employees 🦄
        Currently in closed beta.
        <Warning>**This endpoint is currently in closed beta!** We're testing it with selected customers before its public release. If you're interested in learning more or getting early access, please reach out.</Warning>
        """
        hook_ctx = HookContext(operation_id='PostHrisEmployeesEmployeeIdAttachments', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostHrisEmployeesEmployeeIDAttachmentsRequest(
            x_integration_id=x_integration_id,
            employee_id=employee_id,
            post_hris_employees_employee_id_attachments_request_body=post_hris_employees_employee_id_attachments_request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostHrisEmployeesEmployeeIDAttachmentsRequest, base_url, '/hris/employees/{employee_id}/attachments', request)
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostHrisEmployeesEmployeeIDAttachmentsRequest, "post_hris_employees_employee_id_attachments_request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        content_type = http_res.headers.get('Content-Type')
        
        res = operations.PostHrisEmployeesEmployeeIDAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostHrisEmployeesEmployeeIDAttachmentsSuccessfulResponse])
                res.post_hris_employees_employee_id_attachments_successful_response = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, errors.PostHrisEmployeesEmployeeIDAttachmentsErrorResponse)
                out.raw_response = http_res
                raise out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    