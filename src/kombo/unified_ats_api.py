"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from kombo import utils
from kombo._hooks import HookContext
from kombo.models import errors, operations, shared
from typing import Optional

class UnifiedATSAPI:
    r"""Unified endpoints to access all the ATS concepts you might need."""
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def delete_ats_candidates_candidate_id_tags(self, x_integration_id: str, candidate_id: str, request_body: Optional[operations.DeleteAtsCandidatesCandidateIDTagsRequestBody] = None) -> operations.DeleteAtsCandidatesCandidateIDTagsResponse:
        r"""Remove tag from candidate
        Remove a tag from a candidate based on its name.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        This will also succeed if the tag does not exist on the candidate.

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"tag\": {
            \"name\": \"Excellent Fit\"
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='DeleteAtsCandidatesCandidateIdTags', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.DeleteAtsCandidatesCandidateIDTagsRequest(
            x_integration_id=x_integration_id,
            candidate_id=candidate_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteAtsCandidatesCandidateIDTagsRequest, base_url, '/ats/candidates/{candidate_id}/tags', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.DeleteAtsCandidatesCandidateIDTagsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('DELETE', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.DeleteAtsCandidatesCandidateIDTagsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteAtsCandidatesCandidateIDTagsSuccessfulResponse])
                res.delete_ats_candidates_candidate_id_tags_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.DeleteAtsCandidatesCandidateIDTagsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.DeleteAtsCandidatesCandidateIDTagsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.DeleteATSCandidatesCandidateIDTagsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.DeleteATSCandidatesCandidateIDTagsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.DeleteATSCandidatesCandidateIDTagsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_application_stages(self, request: operations.GetAtsApplicationStagesRequest) -> operations.GetAtsApplicationStagesResponse:
        r"""Get application stages
        Get all application stages available in the ATS.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/applicantstack/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />ApplicantStack</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        **(⚠️ Deprecated)** Get all application stages available in the ATS. This is deprecated because most ATS systems have separate sets of stages for each job. We'd recommend using the `stages` property on jobs instead.

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsApplicationStages', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/application-stages'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsApplicationStagesRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsApplicationStagesResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsApplicationStagesSuccessfulResponse])
                res.get_ats_application_stages_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsApplicationStagesErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsApplicationStagesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationStagesUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationStagesUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationStagesUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_applications(self, request: operations.GetAtsApplicationsRequest) -> operations.GetAtsApplicationsResponse:
        r"""Get applications
        Retrieve all applications.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/applicantstack/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />ApplicantStack</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsApplications', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/applications'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsApplicationsRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsApplicationsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsApplicationsSuccessfulResponse])
                res.get_ats_applications_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsApplicationsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsApplicationsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSApplicationsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_candidates(self, request: operations.GetAtsCandidatesRequest) -> operations.GetAtsCandidatesResponse:
        r"""Get candidates
        Retrieve all candidates.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/applicantstack/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />ApplicantStack</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsCandidates', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/candidates'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsCandidatesRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsCandidatesResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsCandidatesSuccessfulResponse])
                res.get_ats_candidates_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsCandidatesErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsCandidatesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSCandidatesUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSCandidatesUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSCandidatesUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_jobs(self, request: operations.GetAtsJobsRequest) -> operations.GetAtsJobsResponse:
        r"""Get jobs
        Retrieve all jobs.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heyrecruit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Heyrecruit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/mysolution/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Mysolution</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/applicantstack/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />ApplicantStack</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsJobs', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/jobs'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsJobsRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsJobsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsJobsSuccessfulResponse])
                res.get_ats_jobs_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsJobsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsJobsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSJobsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSJobsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSJobsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_tags(self, request: operations.GetAtsTagsRequest) -> operations.GetAtsTagsResponse:
        r"""Get tags
        Retrieve all tags.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsTags', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/tags'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsTagsRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsTagsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsTagsSuccessfulResponse])
                res.get_ats_tags_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsTagsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsTagsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSTagsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSTagsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSTagsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ats_users(self, request: operations.GetAtsUsersRequest) -> operations.GetAtsUsersResponse:
        r"""Get users
        Retrieve all users.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Top level filters use AND, while individual filters use OR if they accept multiple arguments. That means filters will be resolved like this: `(id IN ids) AND (remote_id IN remote_ids)`
        """
        hook_ctx = HookContext(operation_id='GetAtsUsers', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/users'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        query_params = { **utils.get_query_params(operations.GetAtsUsersRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetAtsUsersResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAtsUsersSuccessfulResponse])
                res.get_ats_users_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsUsersErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetAtsUsersResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSUsersUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSUsersUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.GetATSUsersUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def patch_ats_candidates_candidate_id(self, x_integration_id: str, candidate_id: str, patch_ats_candidates_candidate_id_request_body: Optional[shared.PatchAtsCandidatesCandidateIDRequestBody] = None) -> operations.PatchAtsCandidatesCandidateIDResponse:
        r"""Update candidate 🦄
        Currently in closed beta.
        <Warning>**This endpoint is currently in closed beta!** We're testing it with selected customers before its public release. If you're interested in learning more or getting early access, please reach out.</Warning>
        """
        hook_ctx = HookContext(operation_id='PatchAtsCandidatesCandidateId', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PatchAtsCandidatesCandidateIDRequest(
            x_integration_id=x_integration_id,
            candidate_id=candidate_id,
            patch_ats_candidates_candidate_id_request_body=patch_ats_candidates_candidate_id_request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PatchAtsCandidatesCandidateIDRequest, base_url, '/ats/candidates/{candidate_id}', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PatchAtsCandidatesCandidateIDRequest, "patch_ats_candidates_candidate_id_request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PATCH', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PatchAtsCandidatesCandidateIDResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PatchAtsCandidatesCandidateIDSuccessfulResponse])
                res.patch_ats_candidates_candidate_id_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PatchAtsCandidatesCandidateIDErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_applications_application_id_notes(self, x_integration_id: str, application_id: str, request_body: Optional[operations.PostAtsApplicationsApplicationIDNotesRequestBody] = None) -> operations.PostAtsApplicationsApplicationIDNotesResponse:
        r"""Add note to application
        Add a note to an application.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Add extra information to an application. This can be any extra text information you want to add to an application.

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"content\": \"A new message from the candidate is available in YourChat!\",
          \"content_type\": \"PLAIN_TEXT\"
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsApplicationsApplicationIdNotes', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsApplicationsApplicationIDNotesRequest(
            x_integration_id=x_integration_id,
            application_id=application_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsApplicationsApplicationIDNotesRequest, base_url, '/ats/applications/{application_id}/notes', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsApplicationsApplicationIDNotesRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsApplicationsApplicationIDNotesResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsApplicationsApplicationIDNotesSuccessfulResponse])
                res.post_ats_applications_application_id_notes_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsApplicationsApplicationIDNotesErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsApplicationsApplicationIDNotesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDNotesUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDNotesUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDNotesUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_applications_application_id_result_links(self, x_integration_id: str, application_id: str, request_body: Optional[operations.PostAtsApplicationsApplicationIDResultLinksRequestBody] = None) -> operations.PostAtsApplicationsApplicationIDResultLinksResponse:
        r"""Add result link to application
        Add a result link to an application.
        This can, for example, be used to link a candidate back to a test result/assessment in your application. As not all ATS tools have a \"result link\" feature, we sometimes repurpose other fields to expose it.

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"application_id\": \"8Xi6iZrwusZqJmDGXs49GBmJ\",
          \"label\": \"Assessment Result\",
          \"url\": \"https://example.com/test-results/5BtP1WC1UboS7CF3yxjKcvjG\",
          \"details\": {
            \"custom_field_name_prefix\": \"Acme:\",
            \"attributes\": [
              {
                \"key\": \"Score\",
                \"value\": \"100%\"
              },
              {
                \"key\": \"Time\",
                \"value\": \"2:30h\"
              }
            ]
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsApplicationsApplicationIdResultLinks', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsApplicationsApplicationIDResultLinksRequest(
            x_integration_id=x_integration_id,
            application_id=application_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsApplicationsApplicationIDResultLinksRequest, base_url, '/ats/applications/{application_id}/result-links', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsApplicationsApplicationIDResultLinksRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsApplicationsApplicationIDResultLinksResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsApplicationsApplicationIDResultLinksSuccessfulResponse])
                res.post_ats_applications_application_id_result_links_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsApplicationsApplicationIDResultLinksErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsApplicationsApplicationIDResultLinksResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDResultLinksUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDResultLinksUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSApplicationsApplicationIDResultLinksUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_candidates(self, x_integration_id: str, request_body: Optional[operations.PostAtsCandidatesRequestBody] = None) -> operations.PostAtsCandidatesResponse:
        r"""Create candidate
        Create a new candidate and application for the specified job.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heyrecruit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Heyrecruit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/mysolution/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Mysolution</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Warning>
              **This endpoint is deprecated!**

              We realized that in practice it was always more about creating _applications_ instead of _candidates_, so we created a new, more aptly named one that you should use instead: [Create application](/ats/v1/post-jobs-job-id-applications)

              Using it also has the benefit that we return the newly created applicant at the root level, so you can easily store its ID.
            </Warning>

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"candidate\": {
            \"first_name\": \"Frank\",
            \"last_name\": \"Doe\",
            \"company\": \"Acme Inc.\",
            \"title\": \"Head of Integrations\",
            \"email_address\": \"frank.doe@example.com\",
            \"phone_number\": \"+1-541-754-3010\",
            \"gender\": \"MALE\",
            \"salary_expectations\": {
              \"amount\": 100000,
              \"period\": \"YEAR\"
            },
            \"availability_date\": \"2021-01-01\",
            \"location\": {
              \"city\": \"New York\",
              \"country\": \"US\"
            },
            \"social_links\": [
              {
                \"url\": \"https://www.linkedin.com/in/frank-doe-123456789/\"
              },
              {
                \"url\": \"https://twitter.com/frankdoe\"
              }
            ]
          },
          \"application\": {
            \"job_id\": \"BDpgnpZ148nrGh4mYHNxJBgx\",
            \"stage_id\": \"8x3YKRDcuRnwShdh96ShBNn1\"
          },
          \"screening_question_answers\": [
            {
              \"question_id\": \"3phFBNXRweGnDmsU9o2vdPuQ\",
              \"answer\": \"Yes\"
            },
            {
              \"question_id\": \"EYJjhMQT3LtVKXnTbnRT8s6U\",
              \"answer\": [
                \"GUzE666zfyjeoCJX6A8n7wh6\",
                \"5WPHzzKAv8cx97KtHRUV96U8\",
                \"7yZfKGzWigXxxRTygqAfHvyE\"
              ]
            }
          ],
          \"attachments\": [
            {
              \"name\": \"Frank Doe CV.txt\",
              \"data\": \"SGkgdGhlcmUsIEtvbWJvIGlzIGN1cnJlbnRseSBoaXJpbmcgZW5naW5lZXJzIHRoYXQgbG92ZSB0byB3b3JrIG9uIGRldmVsb3BlciBwcm9kdWN0cy4=\",
              \"type\": \"CV\",
              \"content_type\": \"text/plain\"
            }
          ]
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsCandidates', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsCandidatesRequest(
            x_integration_id=x_integration_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/ats/candidates'
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsCandidatesRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsCandidatesResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsCandidatesSuccessfulResponse])
                res.post_ats_candidates_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_candidates_candidate_id_attachments(self, x_integration_id: str, candidate_id: str, request_body: Optional[operations.PostAtsCandidatesCandidateIDAttachmentsRequestBody] = None) -> operations.PostAtsCandidatesCandidateIDAttachmentsResponse:
        r"""Add attachment to candidate
        Uploads an attachment file for the specified candidate.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"candidate_id\": \"GRKdd9dibYKKCrmGRSMJf3wu\",
          \"attachment\": {
            \"name\": \"Frank Doe CV.txt\",
            \"data\": \"SGkgdGhlcmUsIEtvbWJvIGlzIGN1cnJlbnRseSBoaXJpbmcgZW5naW5lZXJzIHRoYXQgbG92ZSB0byB3b3JrIG9uIGRldmVsb3BlciBwcm9kdWN0cy4=\",
            \"type\": \"CV\",
            \"content_type\": \"text/plain\"
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsCandidatesCandidateIdAttachments', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsCandidatesCandidateIDAttachmentsRequest(
            x_integration_id=x_integration_id,
            candidate_id=candidate_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsCandidatesCandidateIDAttachmentsRequest, base_url, '/ats/candidates/{candidate_id}/attachments', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsCandidatesCandidateIDAttachmentsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsCandidatesCandidateIDAttachmentsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsCandidatesCandidateIDAttachmentsSuccessfulResponse])
                res.post_ats_candidates_candidate_id_attachments_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDAttachmentsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDAttachmentsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDAttachmentsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDAttachmentsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDAttachmentsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_candidates_candidate_id_result_links(self, x_integration_id: str, candidate_id: str, request_body: Optional[operations.PostAtsCandidatesCandidateIDResultLinksRequestBody] = None) -> operations.PostAtsCandidatesCandidateIDResultLinksResponse:
        r"""Add result link to candidate
        **(⚠️ Deprecated)** Add a result link to a candidate.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jobvite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Jobvite</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Please use [add result link to application](/ats/v1/post-applications-application-id-result-links) instead.
        This can, for example, be used to link a candidate back to a test result/assessment in your application. As not all ATS tools have a \"result link\" feature, we sometimes repurpose other fields to expose it.

        This action is deprecated because result links usually concern applications and not candidates. Use endpoint nested under `/applications` instead.

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"label\": \"Assessment Result\",
          \"url\": \"https://example.com/test-results/5BtP1WC1UboS7CF3yxjKcvjG\",
          \"details\": {
            \"custom_field_name_prefix\": \"Acme:\",
            \"attributes\": [
              {
                \"key\": \"Score\",
                \"value\": \"100%\"
              },
              {
                \"key\": \"Time\",
                \"value\": \"2:30h\"
              }
            ]
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsCandidatesCandidateIdResultLinks', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsCandidatesCandidateIDResultLinksRequest(
            x_integration_id=x_integration_id,
            candidate_id=candidate_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsCandidatesCandidateIDResultLinksRequest, base_url, '/ats/candidates/{candidate_id}/result-links', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsCandidatesCandidateIDResultLinksRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsCandidatesCandidateIDResultLinksResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsCandidatesCandidateIDResultLinksSuccessfulResponse])
                res.post_ats_candidates_candidate_id_result_links_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDResultLinksErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDResultLinksResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDResultLinksUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDResultLinksUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDResultLinksUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_candidates_candidate_id_tags(self, x_integration_id: str, candidate_id: str, request_body: Optional[operations.PostAtsCandidatesCandidateIDTagsRequestBody] = None) -> operations.PostAtsCandidatesCandidateIDTagsResponse:
        r"""Add tag to candidate
        Add a tag to a candidate.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        Kombo takes care of creating the tag if required, finding out the right ID, and appending it to the list of tags.

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"tag\": {
            \"name\": \"Excellent Fit\"
          }
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsCandidatesCandidateIdTags', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsCandidatesCandidateIDTagsRequest(
            x_integration_id=x_integration_id,
            candidate_id=candidate_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsCandidatesCandidateIDTagsRequest, base_url, '/ats/candidates/{candidate_id}/tags', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsCandidatesCandidateIDTagsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsCandidatesCandidateIDTagsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsCandidatesCandidateIDTagsSuccessfulResponse])
                res.post_ats_candidates_candidate_id_tags_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDTagsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsCandidatesCandidateIDTagsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDTagsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDTagsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSCandidatesCandidateIDTagsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_ats_jobs_job_id_applications(self, x_integration_id: str, job_id: str, request_body: Optional[operations.PostAtsJobsJobIDApplicationsRequestBody] = None) -> operations.PostAtsJobsJobIDApplicationsResponse:
        r"""Create application
        Create a new application and candidate for the specified job. The first CV in the attachments will be treated as the resume of the candidate when the tool allows previewing a resume.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/onlyfy/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Onlyfy</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/personio/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Personio</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/rexx/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />rexx systems</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/afas/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />AFAS Software</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bamboohr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BambooHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bullhorn/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Bullhorn</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/fountain/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Fountain</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/softgarden/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Softgarden</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/pinpoint/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Pinpoint</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/welcometothejungle/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Welcome to the Jungle</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/dvinci/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />d.vinci</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/join/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JOIN</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sagehr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sage HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/erecruiter/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />eRecruiter</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/umantis/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Haufe Umantis</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/taleez/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Taleez</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/hrworks/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />HRworks</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/otys/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />OTYS</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/heyrecruit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Heyrecruit</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />RECRU</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/jazzhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />JazzHR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/bite/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />BITE</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/mysolution/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Mysolution</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/breezyhr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Breezy HR</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/flatchr/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Flatchr</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/sandbox/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Sandbox</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"stage_id\": \"8x3YKRDcuRnwShdh96ShBNn1\",
          \"candidate\": {
            \"first_name\": \"Frank\",
            \"last_name\": \"Doe\",
            \"company\": \"Acme Inc.\",
            \"title\": \"Head of Integrations\",
            \"email_address\": \"frank.doe@example.com\",
            \"phone_number\": \"+1-541-754-3010\",
            \"gender\": \"MALE\",
            \"salary_expectations\": {
              \"amount\": 100000,
              \"period\": \"YEAR\"
            },
            \"availability_date\": \"2021-01-01\",
            \"location\": {
              \"city\": \"New York\",
              \"country\": \"US\"
            }
          },
          \"attachments\": [
            {
              \"name\": \"Frank Doe CV.txt\",
              \"data\": \"SGkgdGhlcmUsIEtvbWJvIGlzIGN1cnJlbnRseSBoaXJpbmcgZW5naW5lZXJzIHRoYXQgbG92ZSB0byB3b3JrIG9uIGRldmVsb3BlciBwcm9kdWN0cy4=\",
              \"type\": \"CV\",
              \"content_type\": \"text/plain\"
            }
          ],
          \"screening_question_answers\": [
            {
              \"question_id\": \"3phFBNXRweGnDmsU9o2vdPuQ\",
              \"answer\": \"Yes\"
            },
            {
              \"question_id\": \"EYJjhMQT3LtVKXnTbnRT8s6U\",
              \"answer\": [
                \"GUzE666zfyjeoCJX6A8n7wh6\",
                \"5WPHzzKAv8cx97KtHRUV96U8\",
                \"7yZfKGzWigXxxRTygqAfHvyE\"
              ]
            }
          ]
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PostAtsJobsJobIdApplications', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PostAtsJobsJobIDApplicationsRequest(
            x_integration_id=x_integration_id,
            job_id=job_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostAtsJobsJobIDApplicationsRequest, base_url, '/ats/jobs/{job_id}/applications', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PostAtsJobsJobIDApplicationsRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostAtsJobsJobIDApplicationsResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PostAtsJobsJobIDApplicationsSuccessfulResponse])
                res.post_ats_jobs_job_id_applications_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsJobsJobIDApplicationsErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostAtsJobsJobIDApplicationsResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSJobsJobIDApplicationsUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSJobsJobIDApplicationsUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PostATSJobsJobIDApplicationsUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def put_ats_applications_application_id_stage(self, x_integration_id: str, application_id: str, request_body: Optional[operations.PutAtsApplicationsApplicationIDStageRequestBody] = None) -> operations.PutAtsApplicationsApplicationIDStageResponse:
        r"""Move application to stage
        Moves an application to a specified stage.

        <Accordion title=\"Supported integrations\" icon=\"list-check\">
        This feature is currently available for the following integrations:

        <ul>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workday/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workday</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/successfactors/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SAP SuccessFactors</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/smartrecruiters/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />SmartRecruiters</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/lever/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Lever</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/recruitee/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Recruitee</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/greenhouse/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Greenhouse</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/teamtailor/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Teamtailor</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/ashby/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Ashby</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/workable/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Workable</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/traffit/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />TRAFFIT</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/oraclerecruiting/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Oracle Recruiting Cloud</li>
        <li style={{display: 'flex', alignItems: 'center'}}><img
          src=\"https://storage.googleapis.com/kombo-assets/integrations/homerun/icon.svg\"
          style={{\"width\":\"16px\",\"height\":\"16px\",\"marginTop\":\"0 !important\",\"marginBottom\":\"0 !important\",\"marginRight\":\"8px !important\"}}
        />Homerun</li>
        </ul>

        You'd like to see this feature for another integration? Please reach out!
        We're always happy to discuss extending our coverage.
        </Accordion>

        <Note>
          This endpoint requires the permission **Create and manage candidates and applications** to be enabled in [your scope config](/scopes).
        </Note>

        ### Example Request Body

        ```json
        {
          \"stage_id\": \"3PJ8PZhZZa1eEdd2DtPNtVup\"
        }
        ```
        """
        hook_ctx = HookContext(operation_id='PutAtsApplicationsApplicationIdStage', oauth2_scopes=[], security_source=self.sdk_configuration.security)
        request = operations.PutAtsApplicationsApplicationIDStageRequest(
            x_integration_id=x_integration_id,
            application_id=application_id,
            request_body=request_body,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PutAtsApplicationsApplicationIDStageRequest, base_url, '/ats/applications/{application_id}/stage', request)
        
        if callable(self.sdk_configuration.security):
            headers, query_params = utils.get_security(self.sdk_configuration.security())
        else:
            headers, query_params = utils.get_security(self.sdk_configuration.security)
        
        headers = { **utils.get_headers(request), **headers }
        req_content_type, data, form = utils.serialize_request_body(request, operations.PutAtsApplicationsApplicationIDStageRequest, "request_body", False, True, 'json')
        if req_content_type is not None and req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('PUT', url, params=query_params, data=data, files=form, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['400','401','403','404','4XX','503','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PutAtsApplicationsApplicationIDStageResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.PutAtsApplicationsApplicationIDStageSuccessfulResponse])
                res.put_ats_applications_application_id_stage_successful_response = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PutAtsApplicationsApplicationIDStageErrorResponse)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PutAtsApplicationsApplicationIDStageResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 403:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PutATSApplicationsApplicationIDStageUnifiedATSAPIResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PutATSApplicationsApplicationIDStageUnifiedATSAPIResponseResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 503:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.PutATSApplicationsApplicationIDStageUnifiedATSAPIResponse503ResponseBody)
                out.raw_response = http_res
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    